x = "Log Fold Change",
y = "-log10(P-Value)",
title = paste0(name,", inflammatome (top 2000)")
) +
theme_custom
#coord_cartesian(ylim = c(0, 20))
print(p1)
ggsave(paste0("figures/volcano_2000_",name,".png"), p1, height = 3, width = 3)
p2 <- ggplot(data %>% arrange(top_100), aes(x = adj_logFC, y = adj_pval, color = top_100, alpha = top_100)) +
geom_point(size = .5) +
scale_color_manual(values = c("no" = "grey", "yes" = "red")) +
scale_alpha_manual(values = c("no" = 0.3, "yes" = 1)) +
labs(
x = "Log Fold Change",
y = "-log10(P-Value)",
title = paste0(name,", inflammation signature (top 100)")
) +
theme_custom
#coord_cartesian(ylim = c(0, 20))
print(p2)
ggsave(paste0("figures/volcano_100_",name,".png"), p2, height = 3, width = 3)
combined_plot <- p1 + p2 + plot_layout(ncol = 2,guides = "collect")
# Print and save the combined plot
print(combined_plot)
ggsave(paste0("figures/volcano_",name,".png"), combined_plot, height = 3, width = 6)  # Wider panel
}
dir="~/Desktop/Work/inflammatome/inflammatome_resource"
setwd(dir)
# Define functions -------------------------------------------------------------
#source(file = "scripts/99_project_functions.R")
# Read inflammatome list  --------------------------------------------------------------------
ranked.list <- read_tsv("data/05_agg_list_unionmarkers_latest.tsv",show_col_types = FALSE)
ens.entrez = bitr(ranked.list$ENSG.ID, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
symbol.entrez = bitr(ranked.list$Gene.name, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
ranked.list.entrez.ensembl = merge(ranked.list, ens.entrez, by.x = "ENSG.ID", by.y = "ENSEMBL", all.x = TRUE)
ranked.list.entrez.symbol = merge(ranked.list, symbol.entrez, by.x = "Gene.name", by.y = "SYMBOL", all.x = TRUE)
ens.uniprot = bitr(ranked.list$ENSG.ID, fromType = "ENSEMBL", toType = "UNIPROT", OrgDb = org.Hs.eg.db)
symbol.uniprot = bitr(ranked.list$Gene.name, fromType = "SYMBOL", toType = "UNIPROT", OrgDb = org.Hs.eg.db)
ranked.list.uniprot.ensembl = merge(ranked.list, ens.uniprot, by.x = "ENSG.ID", by.y = "ENSEMBL", all.x = TRUE)
ranked.list.uniprot.symbol = merge(ranked.list, symbol.uniprot, by.x = "Gene.name", by.y = "SYMBOL", all.x = TRUE)
top2000 <- ranked.list.entrez.symbol %>%
filter(Position <= 2000)
top100 <- ranked.list.entrez.symbol %>%
filter(Position <= 100)
length(unique(top2000$Gene.name))
length(unique(top2000$ENSG.ID))
length(unique(top2000$ENTREZID))
top2000[is.na(top2000$ENTREZID),]$ENSG.ID
########## Prepare inflammation gene sets, Ensembl ids ############
##################################################################
## GO sets ---------------------------------------------------------------------
go <- msigdbr(species = "Homo sapiens", category = "C5") %>%
dplyr::select(gs_name, ensembl_gene, gene_symbol, gs_exact_source) %>%
filter(gs_exact_source %in% c("GO:0002534", "GO:0006954", "GO:0002526", "GO:0002544")) %>%
dplyr::rename(gene = ensembl_gene,
gs = gs_name)
## Wikipathways ----------------------------------------------------------------
# WP4493 WP_CELLS_AND_MOLECULES_INVOLVED_IN_LOCAL_ACUTE_INFLAMMATORY_RESPONSE
# WP530 WP_CYTOKINES_AND_INFLAMMATORY_RESPONSE
# WP5198 WP_INFLAMMATORY_BOWEL_DISEASE_SIGNALING ?? not found
# WP453 WP_INFLAMMATORY_RESPONSE_PATHWAY
wp <- msigdbr(species = "Homo sapiens", category = "C2") %>%
dplyr::select(gs_name, ensembl_gene, gene_symbol, gs_exact_source) %>%
filter(gs_exact_source %in% c("WP4493", "WP530", "WP5198", "WP453")) %>%
dplyr::rename(gene = ensembl_gene,
gs = gs_name)
## Reactome --------------------------------------------------------------------
# R-HSA-622312 REACTOME_INFLAMMASOMES
# R-HSA-913531 REACTOME_INTERFERON_SIGNALING
# R-HSA-9020702 REACTOME_INTERLEUKIN_1_SIGNALING
# R-HSA-75893 REACTOME_TNF_SIGNALING
reactome <- msigdbr(species = "Homo sapiens", category = "C2") %>%
dplyr::select(gs_name, ensembl_gene, gene_symbol, gs_exact_source) %>%
filter(gs_exact_source %in% c("R-HSA-622312", "R-HSA-913531", "R-HSA-9020702", "R-HSA-75893")) %>%
dplyr::rename(gene = ensembl_gene,
gs = gs_name)
## Msigdb -----
h <- msigdbr(species = "Homo sapiens", category = "H") %>%
dplyr::select(gs_name, ensembl_gene, entrez_gene, gene_symbol)
msigdb.markers <- h[h$gs_name == "HALLMARK_INFLAMMATORY_RESPONSE",]
msigdb.markers = msigdb.markers[c(2,3,4)]
## Bind all sets ---------------------------------------------------------------
top.100 = filter(ranked.list, Position <= 100)$ENSG.ID
go = dplyr::select(go, gs, gene)
wp = dplyr::select(wp, gs, gene)
reactome = dplyr::select(reactome, gs, gene)
msigdb = msigdb.markers$ensembl_gene
all.sets <- rbind(
data.frame(gs = "Inflammation signature (top100)", gene = top.100) ,
data.frame(gs = "MSigDB hallmark inflammatory response", gene = msigdb),
go,
wp,
reactome
)
## Save file --------
write_tsv(all.sets, "data/inflammationGeneSetsEnsembl.tsv")
########## Prepare inflammation gene sets, Entrez ids ############
##################################################################
## GO sets ---------------------------------------------------------------------
go <- msigdbr(species = "Homo sapiens", category = "C5") %>%
dplyr::select(gs_name, entrez_gene, gene_symbol, gs_exact_source) %>%
filter(gs_exact_source %in% c("GO:0002534", "GO:0006954", "GO:0002526", "GO:0002544")) %>%
dplyr::rename(gene = entrez_gene,
gs = gs_name)
length(unique(go$gene_symbol))
## Wikipathways ----------------------------------------------------------------
# WP4493 WP_CELLS_AND_MOLECULES_INVOLVED_IN_LOCAL_ACUTE_INFLAMMATORY_RESPONSE
# WP530 WP_CYTOKINES_AND_INFLAMMATORY_RESPONSE
# WP5198 WP_INFLAMMATORY_BOWEL_DISEASE_SIGNALING ?? not found
# WP453 WP_INFLAMMATORY_RESPONSE_PATHWAY
wp <- msigdbr(species = "Homo sapiens", category = "C2") %>%
dplyr::select(gs_name, entrez_gene, gene_symbol, gs_exact_source) %>%
filter(gs_exact_source %in% c("WP4493", "WP530", "WP5198", "WP453")) %>%
dplyr::rename(gene = entrez_gene,
gs = gs_name)
## Reactome --------------------------------------------------------------------
# R-HSA-622312 REACTOME_INFLAMMASOMES
# R-HSA-913531 REACTOME_INTERFERON_SIGNALING
# R-HSA-9020702 REACTOME_INTERLEUKIN_1_SIGNALING
# R-HSA-75893 REACTOME_TNF_SIGNALING
reactome <- msigdbr(species = "Homo sapiens", category = "C2") %>%
dplyr::select(gs_name, entrez_gene, gene_symbol, gs_exact_source) %>%
filter(gs_exact_source %in% c("R-HSA-622312", "R-HSA-913531", "R-HSA-9020702", "R-HSA-75893")) %>%
dplyr::rename(gene = entrez_gene,
gs = gs_name)
## Msigdb -----
h <- msigdbr(species = "Homo sapiens", category = "H") %>%
dplyr::select(gs_name, ensembl_gene, entrez_gene,gene_symbol)
msigdb.markers <- h[h$gs_name == "HALLMARK_INFLAMMATORY_RESPONSE",]
msigdb.markers = msigdb.markers[c(2,3,4)]
## Bind all sets ---------------------------------------------------------------
top.100 = filter(ranked.list.entrez.ensembl, Position <= 100)$ENTREZID
go = dplyr::select(go, gs, gene)
wp = dplyr::select(wp, gs, gene)
reactome = dplyr::select(reactome, gs, gene)
msigdb = msigdb.markers$entrez_gene
all.sets <- rbind(
data.frame(gs = "Inflammation signature (top100)", gene = top.100) ,
data.frame(gs = "MSigDB hallmark inflammatory response", gene = msigdb),
go,
wp,
reactome
)
## Save file --------
write_tsv(all.sets, "data/inflammationGeneSetsEntrez.tsv")
#all.sets <- read_tsv("data/inflammationGeneSets.tsv")
################# Map identifiers  ##########################
#############################################################
#library(org.Hs.eg.db)
#library(AnnotationDbi)
#library(GOSemSim)
#library(DOSE)
#keytypes(org.Hs.eg.db)
#a=bitr(igan$ENSG.ID, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
#b=bitr(igan$ENSG.ID, fromType = "ENSEMBL", toType = "REFSEQ", OrgDb = org.Hs.eg.db)
#b=bitr(ms$Gene.name, fromType = "SYMBOL", toType = "REFSEQ", OrgDb = org.Hs.eg.db)
#a=bitr(igan$ENSG.ID, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
#b=bitr(igan$ENSG.ID, fromType = "ENSEMBL", toType = "REFSEQ", OrgDb = org.Hs.eg.db)
#b=bitr(ms$Gene.name, fromType = "SYMBOL", toType = "REFSEQ", OrgDb = org.Hs.eg.db)
#a=bitr(top2000$Gene.name, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
#a=bitr(top100$Gene.name, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
#GO_DATA <- get_GO_data("org.Hs.eg.db", "BP", "ENTREZID")
#length(unique(a$ENTREZID))
#length(unique(a$ENSEMBL))
#length(unique(b$REFSEQ))
#length(unique(b$SYMBOL))
ms <- read_tsv("data/test_datasets/02_GSE138614_MS_CTL.tsv", show_col_types = FALSE)
data <- process_data(ms,id="ENSG.ID")
gsea <- run_gsea(results_list=data, gene_sets=all.sets.ens, id_col_name="ENSG.ID", sorting_value_col_name = "stat")
plot_gsea(gsea@result, "ms")
plot_volcano(data, logFC_col_name = "log2FoldChange", pval_col_name = "pvalue", name="ms")
UC.Andersen <- read.delim("data/test_datasets/DE.res.UC.Andersen.raw.tsv", row.names = 1, header = TRUE, sep = "\t")
UC.Andersen$id = rownames(UC.Andersen)
data <- process_data(UC.Andersen,id="id",keytype="Uniprot")
gsea <- run_gsea(results_list=data, gene_sets=all.sets.entrez, id_col_name="ENTREZID", sorting_value_col_name = "t")
# Clear workspace --------------------------------------------------------------
#rm(list = ls())
dir="~/Desktop/Work/inflammatome/inflammatome_resource"
setwd(dir)
figures=paste0(dir,"figures/")
resultdir=paste0(dir,"results/")
ifelse(!dir.exists(figures), dir.create(figures), FALSE)
ifelse(!dir.exists(resultdir), dir.create(resultdir), FALSE)
# Install packages (if not already present) and Load libraries ---------------------------------------------------------------
list.of.packages <- c("ggplot2","ggrepel","patchwork","msigdbr","tidyverse","GO.db","org.Hs.eg.db","readxl",
"biomaRt","clusterProfiler","enrichplot","tidytext","dplyr","stringr", "DOSE")
#library(AnnotationDbi)
#library(GOSemSim)
#library(DOSE)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) BiocManager::install(new.packages)
lapply(list.of.packages, library, character.only=TRUE)
# Define functions -------------------------------------------------------------
#source(file = "scripts/99_project_functions.R")
# Read inflammatome list  --------------------------------------------------------------------
#ranked.list <- read_tsv("data/04_rank_agg_list.tsv")
ranked.list <- read_tsv("data/05_agg_list_unionmarkers_latest.tsv",show_col_types = FALSE)
#all.sets.ens <- read_tsv("data/inflammationGeneSetsEnsembl.tsv",show_col_types = FALSE)
#all.sets.entrez <- read_tsv("data/inflammationGeneSetsEntrez.tsv",show_col_types = FALSE)
################################################################################
######### Function for GSEA, GSEA dotplot and volcano plot #####################
################################################################################
#data=UC.Andersen
#id_col_name="id"
#keytype="uniprot"
process_data <- function(data, id_col_name, keytype="Ensembl", mean_expr_col_name=NULL, pval_col_name=NULL){
keytype <- tolower(keytype)
if (keytype == "uniprot") {
id.mapping <- bitr(data[[id_col_name]],
fromType = "UNIPROT",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# Merge the mapped IDs with the original data
data <- merge(data, id.mapping, by.x=id_col_name, by.y = "UNIPROT")
# Ensure ENTREZID is unique by keeping the row with the smallest UNIPROT alphabetically
data <- data %>%
group_by(ENTREZID) %>%
arrange(!!sym(id_col_name)) %>%  # Sort by UniProt ID alphabetically
slice(1) %>%  # Keep only the first (smallest UniProt)
ungroup()
# Replace the original id column with ENTREZID where available
#data[[id_col_name]] <- ifelse(is.na(data$ENTREZID), data[[id_col_name]], data$ENTREZID)
# Drop the extra ENTREZID column after merging
#data <- data %>% select(-ENTREZID)
}
return(data)
}
run_gsea <- function(results_list, gene_sets, id_col_name, sorting_value_col_name){
results_list <- results_list[order(results_list[[sorting_value_col_name]], decreasing = TRUE), ]
ranked_gene_list <- setNames(results_list[[sorting_value_col_name]], results_list[[id_col_name]])
# Run GSEA on the combined gene sets
set.seed(100)
gsea_results <- GSEA(
ranked_gene_list,
TERM2GENE = gene_sets,
minGSSize = 0,
maxGSSize = 2000,
pvalueCutoff = 10,
eps = 0
)
return(gsea_results)
}
plot_gsea <- function(gsea_results, name){
gsea_results$Description <- as.character(gsea_results$Description)
gsea_results$Description <- gsub("_"," ",gsea_results$Description)
gsea_results$Description <- tolower(gsea_results$Description)
gsea_results$Description <- sub("^(.)", "\\U\\1", gsea_results$Description, perl = TRUE)  # Capitalize first letter
gsea_results$Description <- gsub("Gobp","GOBP",gsea_results$Description)
gsea_results$Description <- gsub("Wp","WP",gsea_results$Description)
# Wrap text at 32 characters
gsea_results$Description <- str_wrap(gsea_results$Description, width = 35)
p <- ggplot(gsea_results, aes( x=NES, y = reorder(Description,NES))) +
geom_point(aes(fill = NES, size = -log10(p.adjust)), shape = 21, colour = "black",alpha = 0.8) +
scale_fill_gradient2(midpoint = 0,low = "blue4",mid = "white",high = "red4",space = "Lab") +
theme_light() +
ylab(NULL) + xlab("NES")
# Add black dots for p.adjust < 0.05
p <- p + geom_point(data = gsea_results[gsea_results$p.adjust < 0.05,],
aes(x = NES, y = Description),
color = "black", size = 1)
print(p)
ggsave(paste0("figures/gsea_",name,".png"), p, h = 4.5, w = 5.8)
}
plot_volcano <- function(data, logFC_col_name="log2FoldChange", pval_col_name="pvalue", name="data", keytype="Ensembl"){
theme_custom <- theme_classic() + theme(
plot.title = element_text(size = 10))
keytype <- tolower(keytype)
if (keytype == "ensembl") {
data <- data %>%
arrange(desc(.data[[pval_col_name]])) %>%
mutate(idx = row_number()) %>%
mutate(
top_2000 = if_else(ENSG.ID %in% filter(top2000, Position <= 2000)$ENSG.ID, "yes", "no"),
top_100 = if_else(ENSG.ID %in% filter(top2000, Position <= 100)$ENSG.ID, "yes", "no")
) %>%
mutate(
top_2000 = factor(top_2000, levels = c("no", "yes")),  # Ensure "no" is plotted first
top_100 = factor(top_100, levels = c("no", "yes"))
)  %>%
mutate(
# **Cap -log10(p-value) at 20**
adj_pval = pmin(-log10(.data[[pval_col_name]]), 20),
# **Cap log fold change between -10 and 10**
adj_logFC = pmax(pmin(.data[[logFC_col_name]], 10), -10)
)}
else{
data <- data %>%
arrange(desc(.data[[pval_col_name]])) %>%
mutate(idx = row_number()) %>%
mutate(
top_2000 = if_else(ENTREZID %in% filter(top2000, Position <= 2000)$ENTREZID, "yes", "no"),
top_100 = if_else(ENTREZID %in% filter(top2000, Position <= 100)$ENTREZID, "yes", "no")
) %>%
mutate(
top_2000 = factor(top_2000, levels = c("no", "yes")),  # Ensure "no" is plotted first
top_100 = factor(top_100, levels = c("no", "yes"))
)  %>%
mutate(
# **Cap -log10(p-value) at 20**
adj_pval = pmin(-log10(.data[[pval_col_name]]), 20),
# **Cap log fold change between -10 and 10**
adj_logFC = pmax(pmin(.data[[logFC_col_name]], 10), -10)
)  }
p1 <- ggplot(data %>% arrange(top_2000), aes(x = adj_logFC, y = adj_pval, color = top_2000, alpha = top_2000)) +
geom_point(size = .4, alpha=0.7) +
scale_color_manual(values = c("no" = "grey", "yes" = "red")) +
scale_alpha_manual(values = c("no" = 0.5, "yes" = 0.5)) +
labs(
x = "Log Fold Change",
y = "-log10(P-Value)",
title = paste0(name,", inflammatome (top 2000)")
) +
theme_custom
#coord_cartesian(ylim = c(0, 20))
print(p1)
ggsave(paste0("figures/volcano_2000_",name,".png"), p1, height = 3, width = 3)
p2 <- ggplot(data %>% arrange(top_100), aes(x = adj_logFC, y = adj_pval, color = top_100, alpha = top_100)) +
geom_point(size = .5) +
scale_color_manual(values = c("no" = "grey", "yes" = "red")) +
scale_alpha_manual(values = c("no" = 0.3, "yes" = 1)) +
labs(
x = "Log Fold Change",
y = "-log10(P-Value)",
title = paste0(name,", inflammation signature (top 100)")
) +
theme_custom
#coord_cartesian(ylim = c(0, 20))
print(p2)
ggsave(paste0("figures/volcano_100_",name,".png"), p2, height = 3, width = 3)
combined_plot <- p1 + p2 + plot_layout(ncol = 2,guides = "collect")
# Print and save the combined plot
print(combined_plot)
ggsave(paste0("figures/volcano_",name,".png"), combined_plot, height = 3, width = 6)  # Wider panel
}
UC.Andersen <- read.delim("data/test_datasets/DE.res.UC.Andersen.raw.tsv", row.names = 1, header = TRUE, sep = "\t")
UC.Andersen$id = rownames(UC.Andersen)
data <- process_data(UC.Andersen,id="id",keytype="Uniprot")
gsea <- run_gsea(results_list=data, gene_sets=all.sets.entrez, id_col_name="ENTREZID", sorting_value_col_name = "t")
plot_gsea(gsea@result, "UC.proteomics")
plot_volcano(data, logFC_col_name = "logFC", pval_col_name = "P.Value", name="UC.proteomics",keytype="uniprot")
# Clear workspace --------------------------------------------------------------
#rm(list = ls())
dir="~/Desktop/Work/inflammatome/inflammatome_resource"
setwd(dir)
figures=paste0(dir,"figures/")
resultdir=paste0(dir,"results/")
ifelse(!dir.exists(figures), dir.create(figures), FALSE)
ifelse(!dir.exists(resultdir), dir.create(resultdir), FALSE)
# Install packages (if not already present) and Load libraries ---------------------------------------------------------------
list.of.packages <- c("ggplot2","ggrepel","patchwork","msigdbr","tidyverse","GO.db","org.Hs.eg.db","readxl",
"biomaRt","clusterProfiler","enrichplot","tidytext","dplyr","stringr", "DOSE")
#library(AnnotationDbi)
#library(GOSemSim)
#library(DOSE)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) BiocManager::install(new.packages)
lapply(list.of.packages, library, character.only=TRUE)
# Define functions -------------------------------------------------------------
#source(file = "scripts/99_project_functions.R")
# Read inflammatome list  --------------------------------------------------------------------
#ranked.list <- read_tsv("data/04_rank_agg_list.tsv")
ranked.list <- read_tsv("data/05_agg_list_unionmarkers_latest.tsv",show_col_types = FALSE)
#all.sets.ens <- read_tsv("data/inflammationGeneSetsEnsembl.tsv",show_col_types = FALSE)
#all.sets.entrez <- read_tsv("data/inflammationGeneSetsEntrez.tsv",show_col_types = FALSE)
################################################################################
######### Function for GSEA, GSEA dotplot and volcano plot #####################
################################################################################
#data=UC.Andersen
#id_col_name="id"
#keytype="uniprot"
process_data <- function(data, id_col_name, keytype="Ensembl", mean_expr_col_name=NULL, pval_col_name=NULL){
keytype <- tolower(keytype)
if (keytype == "uniprot") {
id.mapping <- bitr(data[[id_col_name]],
fromType = "UNIPROT",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# Merge the mapped IDs with the original data
data <- merge(data, id.mapping, by.x=id_col_name, by.y = "UNIPROT")
# Ensure ENTREZID is unique by keeping the row with the smallest UNIPROT alphabetically
data <- data %>%
group_by(ENTREZID) %>%
arrange(!!sym(id_col_name)) %>%  # Sort by UniProt ID alphabetically
slice(1) %>%  # Keep only the first (smallest UniProt)
ungroup()
# Replace the original id column with ENTREZID where available
#data[[id_col_name]] <- ifelse(is.na(data$ENTREZID), data[[id_col_name]], data$ENTREZID)
# Drop the extra ENTREZID column after merging
#data <- data %>% select(-ENTREZID)
}
return(data)
}
run_gsea <- function(results_list, gene_sets, id_col_name, sorting_value_col_name){
results_list <- results_list[order(results_list[[sorting_value_col_name]], decreasing = TRUE), ]
ranked_gene_list <- setNames(results_list[[sorting_value_col_name]], results_list[[id_col_name]])
# Run GSEA on the combined gene sets
set.seed(100)
gsea_results <- GSEA(
ranked_gene_list,
TERM2GENE = gene_sets,
minGSSize = 0,
maxGSSize = 2000,
pvalueCutoff = 10,
eps = 0
)
return(gsea_results)
}
plot_gsea <- function(gsea_results, name){
gsea_results$Description <- as.character(gsea_results$Description)
gsea_results$Description <- gsub("_"," ",gsea_results$Description)
gsea_results$Description <- tolower(gsea_results$Description)
gsea_results$Description <- sub("^(.)", "\\U\\1", gsea_results$Description, perl = TRUE)  # Capitalize first letter
gsea_results$Description <- gsub("Gobp","GOBP",gsea_results$Description)
gsea_results$Description <- gsub("Wp","WP",gsea_results$Description)
# Wrap text at 32 characters
gsea_results$Description <- str_wrap(gsea_results$Description, width = 35)
p <- ggplot(gsea_results, aes( x=NES, y = reorder(Description,NES))) +
geom_point(aes(fill = NES, size = -log10(p.adjust)), shape = 21, colour = "black",alpha = 0.8) +
scale_fill_gradient2(midpoint = 0,low = "blue4",mid = "white",high = "red4",space = "Lab") +
theme_light() +
ylab(NULL) + xlab("NES")
# Add black dots for p.adjust < 0.05
p <- p + geom_point(data = gsea_results[gsea_results$p.adjust < 0.05,],
aes(x = NES, y = Description),
color = "black", size = 1)
print(p)
ggsave(paste0("figures/gsea_",name,".png"), p, h = 4.5, w = 5.8)
}
plot_volcano <- function(data, logFC_col_name="log2FoldChange", pval_col_name="pvalue", name="data", keytype="Ensembl"){
theme_custom <- theme_classic() + theme(
plot.title = element_text(size = 8))
keytype <- tolower(keytype)
if (keytype == "ensembl") {
data <- data %>%
arrange(desc(.data[[pval_col_name]])) %>%
mutate(idx = row_number()) %>%
mutate(
top_2000 = if_else(ENSG.ID %in% filter(top2000, Position <= 2000)$ENSG.ID, "yes", "no"),
top_100 = if_else(ENSG.ID %in% filter(top2000, Position <= 100)$ENSG.ID, "yes", "no")
) %>%
mutate(
top_2000 = factor(top_2000, levels = c("no", "yes")),  # Ensure "no" is plotted first
top_100 = factor(top_100, levels = c("no", "yes"))
)  %>%
mutate(
# **Cap -log10(p-value) at 20**
adj_pval = pmin(-log10(.data[[pval_col_name]]), 20),
# **Cap log fold change between -10 and 10**
adj_logFC = pmax(pmin(.data[[logFC_col_name]], 10), -10)
)}
else{
data <- data %>%
arrange(desc(.data[[pval_col_name]])) %>%
mutate(idx = row_number()) %>%
mutate(
top_2000 = if_else(ENTREZID %in% filter(top2000, Position <= 2000)$ENTREZID, "yes", "no"),
top_100 = if_else(ENTREZID %in% filter(top2000, Position <= 100)$ENTREZID, "yes", "no")
) %>%
mutate(
top_2000 = factor(top_2000, levels = c("no", "yes")),  # Ensure "no" is plotted first
top_100 = factor(top_100, levels = c("no", "yes"))
)  %>%
mutate(
# **Cap -log10(p-value) at 20**
adj_pval = pmin(-log10(.data[[pval_col_name]]), 20),
# **Cap log fold change between -10 and 10**
adj_logFC = pmax(pmin(.data[[logFC_col_name]], 10), -10)
)  }
p1 <- ggplot(data %>% arrange(top_2000), aes(x = adj_logFC, y = adj_pval, color = top_2000, alpha = top_2000)) +
geom_point(size = .4, alpha=0.7) +
scale_color_manual(values = c("no" = "grey", "yes" = "red")) +
scale_alpha_manual(values = c("no" = 0.5, "yes" = 0.5)) +
labs(
x = "Log Fold Change",
y = "-log10(P-Value)",
title = paste0(name,", inflammatome (top 2000)")
) +
theme_custom
#coord_cartesian(ylim = c(0, 20))
print(p1)
ggsave(paste0("figures/volcano_2000_",name,".png"), p1, height = 3, width = 3)
p2 <- ggplot(data %>% arrange(top_100), aes(x = adj_logFC, y = adj_pval, color = top_100, alpha = top_100)) +
geom_point(size = .5) +
scale_color_manual(values = c("no" = "grey", "yes" = "red")) +
scale_alpha_manual(values = c("no" = 0.3, "yes" = 1)) +
labs(
x = "Log Fold Change",
y = "-log10(P-Value)",
title = paste0(name,", inflammation signature (top 100)")
) +
theme_custom
#coord_cartesian(ylim = c(0, 20))
print(p2)
ggsave(paste0("figures/volcano_100_",name,".png"), p2, height = 3, width = 3)
combined_plot <- p1 + p2 + plot_layout(ncol = 2,guides = "collect")
# Print and save the combined plot
print(combined_plot)
ggsave(paste0("figures/volcano_",name,".png"), combined_plot, height = 3, width = 6)  # Wider panel
}
igan <- read_tsv("data/test_datasets/02_GSE175759_IgAN_ctl.tsv",show_col_types = FALSE)
data <- process_data(igan,id="ENSG.ID")
gsea <- run_gsea(results_list=data, gene_sets=all.sets, id_col_name="ENSG.ID", sorting_value_col_name = "stat")
igan <- read_tsv("data/test_datasets/02_GSE175759_IgAN_ctl.tsv",show_col_types = FALSE)
data <- process_data(igan,id="ENSG.ID")
View(data)
gsea <- run_gsea(results_list=data, gene_sets=all.sets, id_col_name="ENSG.ID", sorting_value_col_name = "stat")
igan <- read_tsv("data/test_datasets/02_GSE175759_IgAN_ctl.tsv",show_col_types = FALSE)
data <- process_data(igan,id="ENSG.ID")
gsea <- run_gsea(results_list=data, gene_sets=all.sets.ens, id_col_name="ENSG.ID", sorting_value_col_name = "stat")
plot_gsea(gsea@result, "igan")
plot_volcano(data, logFC_col_name = "log2FoldChange", pval_col_name = "pvalue", name="igan")
library(shiny)
